/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package DataContract.Item;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class FullItem extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -4274759580687491622L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"FullItem\",\"namespace\":\"DataContract.Item\",\"fields\":[{\"name\":\"ID\",\"type\":\"int\"},{\"name\":\"Name\",\"type\":\"string\"},{\"name\":\"TypeID\",\"type\":\"int\"},{\"name\":\"TypeDescription\",\"type\":\"string\"},{\"name\":\"DangerID\",\"type\":\"int\"},{\"name\":\"DangerDescription\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<FullItem> ENCODER =
      new BinaryMessageEncoder<FullItem>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<FullItem> DECODER =
      new BinaryMessageDecoder<FullItem>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<FullItem> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<FullItem> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<FullItem> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<FullItem>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this FullItem to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a FullItem from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a FullItem instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static FullItem fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public int ID;
  @Deprecated public java.lang.CharSequence Name;
  @Deprecated public int TypeID;
  @Deprecated public java.lang.CharSequence TypeDescription;
  @Deprecated public int DangerID;
  @Deprecated public java.lang.CharSequence DangerDescription;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public FullItem() {}

  /**
   * All-args constructor.
   * @param ID The new value for ID
   * @param Name The new value for Name
   * @param TypeID The new value for TypeID
   * @param TypeDescription The new value for TypeDescription
   * @param DangerID The new value for DangerID
   * @param DangerDescription The new value for DangerDescription
   */
  public FullItem(java.lang.Integer ID, java.lang.CharSequence Name, java.lang.Integer TypeID, java.lang.CharSequence TypeDescription, java.lang.Integer DangerID, java.lang.CharSequence DangerDescription) {
    this.ID = ID;
    this.Name = Name;
    this.TypeID = TypeID;
    this.TypeDescription = TypeDescription;
    this.DangerID = DangerID;
    this.DangerDescription = DangerDescription;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return ID;
    case 1: return Name;
    case 2: return TypeID;
    case 3: return TypeDescription;
    case 4: return DangerID;
    case 5: return DangerDescription;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: ID = (java.lang.Integer)value$; break;
    case 1: Name = (java.lang.CharSequence)value$; break;
    case 2: TypeID = (java.lang.Integer)value$; break;
    case 3: TypeDescription = (java.lang.CharSequence)value$; break;
    case 4: DangerID = (java.lang.Integer)value$; break;
    case 5: DangerDescription = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'ID' field.
   * @return The value of the 'ID' field.
   */
  public int getID() {
    return ID;
  }


  /**
   * Sets the value of the 'ID' field.
   * @param value the value to set.
   */
  public void setID(int value) {
    this.ID = value;
  }

  /**
   * Gets the value of the 'Name' field.
   * @return The value of the 'Name' field.
   */
  public java.lang.CharSequence getName() {
    return Name;
  }


  /**
   * Sets the value of the 'Name' field.
   * @param value the value to set.
   */
  public void setName(java.lang.CharSequence value) {
    this.Name = value;
  }

  /**
   * Gets the value of the 'TypeID' field.
   * @return The value of the 'TypeID' field.
   */
  public int getTypeID() {
    return TypeID;
  }


  /**
   * Sets the value of the 'TypeID' field.
   * @param value the value to set.
   */
  public void setTypeID(int value) {
    this.TypeID = value;
  }

  /**
   * Gets the value of the 'TypeDescription' field.
   * @return The value of the 'TypeDescription' field.
   */
  public java.lang.CharSequence getTypeDescription() {
    return TypeDescription;
  }


  /**
   * Sets the value of the 'TypeDescription' field.
   * @param value the value to set.
   */
  public void setTypeDescription(java.lang.CharSequence value) {
    this.TypeDescription = value;
  }

  /**
   * Gets the value of the 'DangerID' field.
   * @return The value of the 'DangerID' field.
   */
  public int getDangerID() {
    return DangerID;
  }


  /**
   * Sets the value of the 'DangerID' field.
   * @param value the value to set.
   */
  public void setDangerID(int value) {
    this.DangerID = value;
  }

  /**
   * Gets the value of the 'DangerDescription' field.
   * @return The value of the 'DangerDescription' field.
   */
  public java.lang.CharSequence getDangerDescription() {
    return DangerDescription;
  }


  /**
   * Sets the value of the 'DangerDescription' field.
   * @param value the value to set.
   */
  public void setDangerDescription(java.lang.CharSequence value) {
    this.DangerDescription = value;
  }

  /**
   * Creates a new FullItem RecordBuilder.
   * @return A new FullItem RecordBuilder
   */
  public static DataContract.Item.FullItem.Builder newBuilder() {
    return new DataContract.Item.FullItem.Builder();
  }

  /**
   * Creates a new FullItem RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new FullItem RecordBuilder
   */
  public static DataContract.Item.FullItem.Builder newBuilder(DataContract.Item.FullItem.Builder other) {
    if (other == null) {
      return new DataContract.Item.FullItem.Builder();
    } else {
      return new DataContract.Item.FullItem.Builder(other);
    }
  }

  /**
   * Creates a new FullItem RecordBuilder by copying an existing FullItem instance.
   * @param other The existing instance to copy.
   * @return A new FullItem RecordBuilder
   */
  public static DataContract.Item.FullItem.Builder newBuilder(DataContract.Item.FullItem other) {
    if (other == null) {
      return new DataContract.Item.FullItem.Builder();
    } else {
      return new DataContract.Item.FullItem.Builder(other);
    }
  }

  /**
   * RecordBuilder for FullItem instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<FullItem>
    implements org.apache.avro.data.RecordBuilder<FullItem> {

    private int ID;
    private java.lang.CharSequence Name;
    private int TypeID;
    private java.lang.CharSequence TypeDescription;
    private int DangerID;
    private java.lang.CharSequence DangerDescription;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(DataContract.Item.FullItem.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.ID)) {
        this.ID = data().deepCopy(fields()[0].schema(), other.ID);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.Name)) {
        this.Name = data().deepCopy(fields()[1].schema(), other.Name);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.TypeID)) {
        this.TypeID = data().deepCopy(fields()[2].schema(), other.TypeID);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.TypeDescription)) {
        this.TypeDescription = data().deepCopy(fields()[3].schema(), other.TypeDescription);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.DangerID)) {
        this.DangerID = data().deepCopy(fields()[4].schema(), other.DangerID);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.DangerDescription)) {
        this.DangerDescription = data().deepCopy(fields()[5].schema(), other.DangerDescription);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
    }

    /**
     * Creates a Builder by copying an existing FullItem instance
     * @param other The existing instance to copy.
     */
    private Builder(DataContract.Item.FullItem other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.ID)) {
        this.ID = data().deepCopy(fields()[0].schema(), other.ID);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.Name)) {
        this.Name = data().deepCopy(fields()[1].schema(), other.Name);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.TypeID)) {
        this.TypeID = data().deepCopy(fields()[2].schema(), other.TypeID);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.TypeDescription)) {
        this.TypeDescription = data().deepCopy(fields()[3].schema(), other.TypeDescription);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.DangerID)) {
        this.DangerID = data().deepCopy(fields()[4].schema(), other.DangerID);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.DangerDescription)) {
        this.DangerDescription = data().deepCopy(fields()[5].schema(), other.DangerDescription);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'ID' field.
      * @return The value.
      */
    public int getID() {
      return ID;
    }


    /**
      * Sets the value of the 'ID' field.
      * @param value The value of 'ID'.
      * @return This builder.
      */
    public DataContract.Item.FullItem.Builder setID(int value) {
      validate(fields()[0], value);
      this.ID = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'ID' field has been set.
      * @return True if the 'ID' field has been set, false otherwise.
      */
    public boolean hasID() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'ID' field.
      * @return This builder.
      */
    public DataContract.Item.FullItem.Builder clearID() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'Name' field.
      * @return The value.
      */
    public java.lang.CharSequence getName() {
      return Name;
    }


    /**
      * Sets the value of the 'Name' field.
      * @param value The value of 'Name'.
      * @return This builder.
      */
    public DataContract.Item.FullItem.Builder setName(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.Name = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'Name' field has been set.
      * @return True if the 'Name' field has been set, false otherwise.
      */
    public boolean hasName() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'Name' field.
      * @return This builder.
      */
    public DataContract.Item.FullItem.Builder clearName() {
      Name = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'TypeID' field.
      * @return The value.
      */
    public int getTypeID() {
      return TypeID;
    }


    /**
      * Sets the value of the 'TypeID' field.
      * @param value The value of 'TypeID'.
      * @return This builder.
      */
    public DataContract.Item.FullItem.Builder setTypeID(int value) {
      validate(fields()[2], value);
      this.TypeID = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'TypeID' field has been set.
      * @return True if the 'TypeID' field has been set, false otherwise.
      */
    public boolean hasTypeID() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'TypeID' field.
      * @return This builder.
      */
    public DataContract.Item.FullItem.Builder clearTypeID() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'TypeDescription' field.
      * @return The value.
      */
    public java.lang.CharSequence getTypeDescription() {
      return TypeDescription;
    }


    /**
      * Sets the value of the 'TypeDescription' field.
      * @param value The value of 'TypeDescription'.
      * @return This builder.
      */
    public DataContract.Item.FullItem.Builder setTypeDescription(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.TypeDescription = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'TypeDescription' field has been set.
      * @return True if the 'TypeDescription' field has been set, false otherwise.
      */
    public boolean hasTypeDescription() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'TypeDescription' field.
      * @return This builder.
      */
    public DataContract.Item.FullItem.Builder clearTypeDescription() {
      TypeDescription = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'DangerID' field.
      * @return The value.
      */
    public int getDangerID() {
      return DangerID;
    }


    /**
      * Sets the value of the 'DangerID' field.
      * @param value The value of 'DangerID'.
      * @return This builder.
      */
    public DataContract.Item.FullItem.Builder setDangerID(int value) {
      validate(fields()[4], value);
      this.DangerID = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'DangerID' field has been set.
      * @return True if the 'DangerID' field has been set, false otherwise.
      */
    public boolean hasDangerID() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'DangerID' field.
      * @return This builder.
      */
    public DataContract.Item.FullItem.Builder clearDangerID() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'DangerDescription' field.
      * @return The value.
      */
    public java.lang.CharSequence getDangerDescription() {
      return DangerDescription;
    }


    /**
      * Sets the value of the 'DangerDescription' field.
      * @param value The value of 'DangerDescription'.
      * @return This builder.
      */
    public DataContract.Item.FullItem.Builder setDangerDescription(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.DangerDescription = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'DangerDescription' field has been set.
      * @return True if the 'DangerDescription' field has been set, false otherwise.
      */
    public boolean hasDangerDescription() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'DangerDescription' field.
      * @return This builder.
      */
    public DataContract.Item.FullItem.Builder clearDangerDescription() {
      DangerDescription = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public FullItem build() {
      try {
        FullItem record = new FullItem();
        record.ID = fieldSetFlags()[0] ? this.ID : (java.lang.Integer) defaultValue(fields()[0]);
        record.Name = fieldSetFlags()[1] ? this.Name : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.TypeID = fieldSetFlags()[2] ? this.TypeID : (java.lang.Integer) defaultValue(fields()[2]);
        record.TypeDescription = fieldSetFlags()[3] ? this.TypeDescription : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.DangerID = fieldSetFlags()[4] ? this.DangerID : (java.lang.Integer) defaultValue(fields()[4]);
        record.DangerDescription = fieldSetFlags()[5] ? this.DangerDescription : (java.lang.CharSequence) defaultValue(fields()[5]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<FullItem>
    WRITER$ = (org.apache.avro.io.DatumWriter<FullItem>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<FullItem>
    READER$ = (org.apache.avro.io.DatumReader<FullItem>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeInt(this.ID);

    out.writeString(this.Name);

    out.writeInt(this.TypeID);

    out.writeString(this.TypeDescription);

    out.writeInt(this.DangerID);

    out.writeString(this.DangerDescription);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.ID = in.readInt();

      this.Name = in.readString(this.Name instanceof Utf8 ? (Utf8)this.Name : null);

      this.TypeID = in.readInt();

      this.TypeDescription = in.readString(this.TypeDescription instanceof Utf8 ? (Utf8)this.TypeDescription : null);

      this.DangerID = in.readInt();

      this.DangerDescription = in.readString(this.DangerDescription instanceof Utf8 ? (Utf8)this.DangerDescription : null);

    } else {
      for (int i = 0; i < 6; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.ID = in.readInt();
          break;

        case 1:
          this.Name = in.readString(this.Name instanceof Utf8 ? (Utf8)this.Name : null);
          break;

        case 2:
          this.TypeID = in.readInt();
          break;

        case 3:
          this.TypeDescription = in.readString(this.TypeDescription instanceof Utf8 ? (Utf8)this.TypeDescription : null);
          break;

        case 4:
          this.DangerID = in.readInt();
          break;

        case 5:
          this.DangerDescription = in.readString(this.DangerDescription instanceof Utf8 ? (Utf8)this.DangerDescription : null);
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










